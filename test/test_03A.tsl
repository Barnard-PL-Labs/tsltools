initially assume {
  (in2 && (! in4));
  (G ([c <- c3()] -> (F in3)));
}

initially guarantee {
  (! ([a <- c1()] && [b <- c1()]));
  (G (in1 -> [a <- c1()]));
  (G ([a <- c2()] <-> [c <- c3()]));
  (G ((in2 && in3) -> ([d <- (fun in2)] || [e <- e])));
  (G ((in2 || in4) <-> [e <- (fun in3)]));
  (G ([a <- c2()] || [b <- c5()]));
  (G ([c <- c3()] <-> [f <- c6()]));
  (G (((in2 || in3) || in4) -> [g <- c3()]));
}
