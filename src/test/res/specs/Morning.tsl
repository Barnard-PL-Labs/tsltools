WPARTNER =
  [system.startNewTimer <- min20()]
&& F (timeout && (asleep partner -> [ room.shades.ctrl <- moveTo percent100() ]));

WEEKEND =
  (t.saturday || t.sunday);

WEEKDAY =
  ! WEEKEND;

always assume {
  
  (cm.ready || cm.standby || cm.busy) ;
  (cm.ready -> (!cm.standby && !cm.busy)) ;
  (cm.standby -> (!cm.busy && !cm.ready)) ;
  (cm.busy -> (!cm.ready && !cm.standby)) ;
  ([ cm.ctrl <- turnOn() ] && cm.standby
    -> X cm.busy U ([ cm.ctrl <- makeCoffee() ] || [ cm.ctrl <- turnOff() ] R cm.ready)) ;
  ([ cm.ctrl <- turnOff() ] && cm.ready
    -> X cm.busy U ([ cm.ctrl <- turnOn() ] R cm.standby)) ;
  ([ cm.ctrl <- makeCoffee() ] && cm.ready
    -> X cm.busy U (cm.finished && ([ cm.ctrl <- makeCoffee() ] || [ cm.ctrl <- turnOff() ] R cm.ready))) ;
  ([system.startNewTimer <- hour2()]
    -> F timeout) ;
  (! (room.shades.open && room.shades.closed)) ;
  ([ room.shades.ctrl <- moveTo percent100() ]
    -> F ((! [ room.shades.ctrl <- moveTo percent100() ] && ! [ room.shades.ctrl <- room.shades.ctrl ]) R room.shades.open)) ;
  ([ room.shades.ctrl <- moveTo percent0() ]
    -> F ((! [ room.shades.ctrl <- moveTo percent0() ] && ! [ room.shades.ctrl <- room.shades.ctrl ]) R room.shades.closed)) ;
  ([system.startNewTimer <- hour1()] -> F timeout) ;
  ([system.startNewTimer <- min20()]
    -> F timeout) ;
  (F t.saturday) ;
  (F ! t.saturday) ;
  (F t.sunday) ;
  (F ! t.sunday)
 }
always guarantee {
  
  wakeup && between t.am5 t.am10
  -> ([ cm.ctrl <- makeCoffee() ]
  && F ( cm.ready  // ??? do we need a next here?
      && ( (WEEKEND && [ radio.ctrl <- turnOn() ] && WPARTNER)
         || (WEEKDAY && [ tv.ctrl <- turnOn() ] && WPARTNER))))

  
}
